[
  
    {
      "title"    : "Three Pis, One Network",
      "category" : "",
      "tags"     : "raspberry-pi, networking, and ubuntu",
      "url"      : "/2021/01/12/three-pis-one-network/",
      "date"     : "Jan 12, 2021",
      "content"  : "Most of my projects start from a point of curiosity. This one is no different. I’ve tinkered with Raspberry Pis over the years, but I’ve never tried anything on this scale. Three Raspberry Pis connected via a network switch to create a tiny home lab. The perfect environment to run destructive experiments.cluster designMy Raspberry Pi Network TopologyAs illustrated above, the Raspberry Pi network is a private subnet. One Raspberry Pi serves as a router, leasing out IP addresses to any hosts connected to the private subnet switch. Additionally, the router acts as an internet gateway by forwarding internet from its Wi-Fi interface (wlan0, connected to my home Wi-Fi) to its Ethernet interface (eth0, connected to the private subnet).components listThis is the list of the components that make up my RPi network.  Raspberry Pi 4B x3  Raspberry Pi 4B  heatsinks x3  32 GB MicroSD x3  30 cm Cat6 ethernet cable with RJ45 connectors x3  USB Type C charging cable x3  USB charging hub x1  8-port 10/100Mbps unmanaged switch x1  MicroHDMI to HDMI cable x1  USB Keyboard x1The componentsI couldn’t find a local supplier with 1 ft flexible Cat6 Ethernet cables, so I had to get a 1 m Giganet Cat6 UTP Pure Copper Ethernet Cable, cut it up into 4 pieces and attach RJ45 connectors to each of them. Functionally, they serve their purpose but aesthetically, my Pi layout is restricted.I bought a generic USB charging hub which, shocker, could not power more than two Pis at a go. I’m currently powering each Pi independently using old phone charging heads. Not the best setup, but it’s the best I could do for now.setting up the raspberry pi routerThe first step is installing an Operating System on the Raspberry Pi that I intend to use as my router. There are a number of options available but based on my use case Ubuntu Server 20.04 was an obvious choice. I recently found out that they have an arm64 release built specifically for the Raspberry Pi.Ubuntu has a well written tutorial on how to install the OS on a Raspberry Pi. For the sake of brevity, I will not rewrite the steps on this post, It’s easier to follow the documentation as is on the Ubuntu support page. I set up a Wi-Fi connection on the Pi and skipped step 5 because I won’t be needing a desktop environment on the RPi router.wlan0 static ip addressThe RPi router will serve as a jump server, connecting the private subnet to my home network. For this reason I needed to assign it a static IP address on my home network. This was my process:  Get the RPi’s MAC address on wlan0 by running:ip addr show wlan0 | grep link/ether | awk '{print $2}'  Create a Network-DHCP binding on my home network router’s admin portal (192.168.1.1). I bound the RPi’s MAC address to the static IP address 192.168.1.10.I could now ssh into my RPi router on ubuntu@192.168.1.10.eth0 static ip addressI’ll be running a DHCP server listening on eth0. Before setting that up I need to configure a static IP address for the RPi router’s eth0 on the private network.Ubuntu 17.10 and later uses Netplan as the default network management tool. Netplan’s configuration are stored in the /etc/netplan directory. Ubuntu Server 20.04 is provisioned with cloud-init, I needed to disable it first before assigning a static IP address to eth0.I created the file /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg and added the following:network: {config: disabled}Then I assigned the static IP address 10.0.0.1/8 to eth0 by creating the file /etc/netplan/01-netplan.yaml and adding the following:network:    ethernets:        eth0:            addresses: [10.0.0.1/8]            nameservers:                addresses: [8.8.4.4, 8.8.8.8]    version: 2dnsmasqNext, I installed dnsmasq (short for dns masquerade) to serve as my DHCP server.# install dnsmasqsudo apt update &amp;&amp; sudo apt install dnsmasq# backup the default dnsmasq configsudo mv /etc/dnsmasq.conf /etc/dnsmasq.conf.bakI created a new dnsmasq config sudo vim /etc/dnsmasq.conf:# DHCP should lease addresses over eth0interface=eth0# Listen on the static IP address 10.0.0.1listen-address=10.0.0.1# Enable dnsmasq's integrated DHCP server# and define 96 available address leasesdhcp-range=10.0.0.32,10.0.0.128,12h# declare name serversserver=8.8.8.8server=8.8.4.4# Bind dnsmasq to eth0bind-interfaces# prevent packets with malformed domain names from forwardingdomain-needed# prevent packets from non-routed address spaces from forwardingbogus-priv# Use the hosts file on this machineexpand-hostsRunning sudo service dnsmasq status returns status failed because eth0 is not connected, yet. dnsmasq will fail to assign an IP address to an interface if it’s not up. That’s okay, we’ll get to the networking part later on.forward internet from wlan0 to eth0In my topology description above, the RPi hosts in my private network have access to the internet through the Router Pi. To achieve this, I’ll be setting up internet forwarding on the Router Pi.First, I enabled IP forwarding by uncommenting the following line in /etc/sysctl.conf:net.ipv4.ip_forward=1Then I added a masquerade rule to packets leaving the wlan0 interface. This means that traffic through wlan0 can be rerouted without disruption.sudo iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADEThe next command forwards ESTABLISHED and RELATED packets from wlan0 to eth0.sudo iptables -A FORWARD -i wlan0 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPTThis last command forwards all packets from eth0 to wlan0.sudo iptables -A FORWARD -i eth0 -o wlan0 -j ACCEPTFinally, my iptables rules looked like this:Chain INPUT (policy ACCEPT 30335 packets, 1580K bytes) pkts bytes target     prot opt in     out     source               destination                   Chain FORWARD (policy ACCEPT 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source               destination                       0     0 ACCEPT     all  --  wlan0  eth0    0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED    0     0 ACCEPT     all  --  eth0   wlan0   0.0.0.0/0            0.0.0.0/0           Chain OUTPUT (policy ACCEPT 30665 packets, 1624K bytes) pkts bytes target     prot opt in     out     source               destination                    I installed iptables-persistent to save the iptables rules permanently.sudo apt install iptables-persistentNote: Remember to sudo reboot before proceeding to the next step.raspberry pi hostsI wrote the Ubuntu Server 20.04 image for the Pi hosts in almost the same way I did it for the Router Pi, except setting up a Wi-Fi connection. These hosts will access the internet via forwarded connections on the Router Pi.putting it all togetherThe final stage is connecting all the Pis to the network switch and powering up the switch. All that toil has to amount to something.Running sudo service dnsmasq status should return Active: active(running):● dnsmasq.service - dnsmasq - A lightweight DHCP and caching DNS server     Loaded: loaded (/lib/systemd/system/dnsmasq.service; enabled; vendor preset: enabled)     Active: active (running) since Tue 2021-01-12 12:12:11 UTC; 20min ago    Process: 1249 ExecStartPre=/usr/sbin/dnsmasq --test (code=exited, status=0/SUCCESS)    Process: 1356 ExecStart=/etc/init.d/dnsmasq systemd-exec (code=exited, status=0/SUCCESS)    Process: 1379 ExecStartPost=/etc/init.d/dnsmasq systemd-start-resolvconf (code=exited, status=0/SUCCESS)   Main PID: 1377 (dnsmasq)      Tasks: 1 (limit: 4436)     Memory: 2.7M     CGroup: /system.slice/dnsmasq.service             └─1377 /usr/sbin/dnsmasq -x /run/dnsmasq/dnsmasq.pid -u dnsmasq -7 /etc/dnsmasq.d,.dpkg-dist,.dpkg-old,.dpkg-new --local-service --trust-anchor=.,20326,8,2,e06d44b80b8f1d39a95c0b0d7c65d08458e880409&gt;Running cat /var/lib/misc/dnsmasq.leases should list two DHCP leases, assigned to the two hosts in the private network. I tested internet forwarding by sshing into each Pi using the IPs on their leases and checking that they have internet access.That’s it!painsI had a hard time figuring out how to assign a static IP address to eth0 on the Router Pi. The last time I did that was before netplan, when all network configs were on one file: /etc/network/interfaces.The hardware currently sits in a disorganized state on my work desk. I ordered a Raspberry Pi cluster case and flexible Cat6 Ethernet cables so that I can have a better organized home lab.The next article in this series will be about installing Kubernetes on my private Raspberry Pi network.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2021/01/12/three-pis-one-network/'> <img src='/images/24.jpg' alt='Three Pis, One Network'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>9 min read <time class='article__date' datetime='2021-01-12T11:29:29+03:00'>Jan 12, 2021</time> </span> </div><h2 class='article__title'>Three Pis, One Network</h2> <p class='article__excerpt'>Setting up a subnet with three Pis and a switch</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Ishuah Kariuki'><img class='article__author-image' src='/images/15.jpg' alt='Ishuah Kariuki's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Ishuah Kariuki</a><span> in </span> <span class='article-tags'> <a href='/tag/raspberry-pi' class='article__tag'>raspberry-pi</a>  <a href='/tag/networking' class='article__tag'>networking</a>  <a href='/tag/ubuntu' class='article__tag'>ubuntu</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "Hover As An Offline Fallback",
      "category" : "",
      "tags"     : "ussd, offline-fallback, and android-sdk",
      "url"      : "/2020/05/26/hover-offline-fallback/",
      "date"     : "May 26, 2020",
      "content"  : "A fallback is defined as a contingency option to be taken if the preferred choice is unavailable. Hover is an Android SDK that automates existing USSD sessions in the background of Android applications. We will set up a USSD channel (with a USSD backend), configure an action on the Hover dashboard and integrate the action as an offline fallback in an Android app.USSD has two modes of operation, USSD PULL, which is mobile initiated and USSD PUSH, which is network initiated. For this fallback use-case, we’ll be using the mobile initiated mode to communicate data between the app and server. The USSD protocol will serve as a transport layer and USSD messages will be the data packets communicated between the app and the server. Hover will be the “USSD client” for the Android app, capable of sending and receiving USSD messages.image 1.1The maximum number of characters in a USSD message varies between carriers. Safaricom (KE) has a limit of 160 characters sent from the network from the user and a user input limit of 80 characters. Similarly, USSD session length varies between 90-180 seconds, depending on the carrier.Architectureimage 1.2For the purpose of this demonstration, we’ll be sending a set of key/value pairs to the server. The flow involves four messages sent between the mobile app and the server:  Mobile dials USSD code, initiating a USSD session    2. Server responds with the message send data, awaiting input    3. Mobile sends url query string    4. Server receives and persists the data; responds with a final success messageWe’ll use the Hover SDK to automate these four steps.The USSD GatewayThe first step is setting up a channel on the USSD Gateway. Unlike most protocols, USSD channels are limited to the country/region that the providing telecommunication company operates in. For the purpose of this demo I’ve used a shared USSD channel, * 384 *94#, provided by Africa’s Talking. This short code is only available on Safaricom (KE) and Orange (KE) networks. Dialing the USSD code gives us the following message:That’s because we haven’t set up the callback function that will read and respond to USSD requests. USSD response messages are in plain text beginning with the keyword CON if the session is ongoing. If the response message is the last for the session, begin with the keyword END. A simple USSD callback function that responds request with the message Welcome to Hover would look like this:    # Python 3.8.2    func ussd_callback() {        return “END Welcome to Hover”    }The complete callback function for the architecture described above (image 1.2) looks like this:    import urllib.parse        def save_report(event, context):        params = urllib.parse.parse_qs(event['body'], keep_blank_values=True)            if 'text' not in params:            return {“statusCode”: 400, “body”: “END bad request”}            text = params['text'][0]                # Respond with the text `send input`, expect data        if text == '':            return {“statusCode”: 200, “body”:“CON send data”}                # Parse url query string        data = urllib.parse.parse_qs(text)                # If the data sent is malformed, respond with `bad request`        # and end the session        if not bool(data):            return {“statusCode”: 400, “body”: “END bad request”}            # Process, persist, analyze data                # End session, `success`        return {“statusCode”: 200, “body”:“END success”}The example above is Python 3.8.2 code deployed as a serverless function on AWS. I won’t dig deep on setting up a callback function in this blog post because a lot of the technical input is subjective based on language choice and deployment options. Africa’s Talking USSD API sends a post request to your callback function with five parameters as described in their documentation. In the example, we read the text field, which contains the user input. If the text field is empty then that means the session has just been initiated and the function responses with CON send data. Otherwise, we try parse the text field (assuming it’s url encoded) and end the session.Dialing  * 384 *94# now gives you the following messages:The Hover DashboardNow we have a mature USSD interface that we can use to send data to our backend. The next step is integrating Hover to automate interactions with this interface. If you’re not familiar with creating actions and parsers on our dashboard, you can read through our documentation.image 1.3 Offline Fallback ActionThe image above is an action configuration for our USSD interface. There’s one step configured, a variable that’s a direct response to the send data prompt.image 1.4sendData.setOnClickListener {            var payload = “”            if (report_title.text.isNotEmpty()) payload = “message=${report_title.text}”            payload = if (hungry.isChecked) {                payload.plus(“;hungry=1”)            } else {                payload.plus(“;hungry=0”)            }                        if (intensity.text.isNotEmpty()) payload = payload.plus(“;intensity=${intensity.text}”)                        // Input from a RatingBar            payload = payload.plus(“;mood=${mood.rating}”)            if (payload.isNotEmpty()) {                val i = HoverParameters.Builder(this)                    .request(ACTION_ID)                    .extra(“payload”, payload)                    .buildIntent()                startActivityForResult(i, 0)            } else {                Toast.makeText(this, “Nothing to send!”, Toast.LENGTH_LONG).show()            }        }The example above is in Kotlin and it demonstrated how you can run the action we created before with a valid payload. In this specific case, a valid payload means a URL encoded key/value pairs separated by a semicolon. Example:activity=idle;course=818;altitude=1780.91;path=Ngong+roadAfrica’s Talking’s USSD API posts query string encoded parameters to the callback URL and the individual parameters are separated by an ampersand (&amp;). This means that we can’t use the ampersand (&amp;) in our query string that will sit in the text parameter, that’s why I’ve intentionally used the semicolon separator in the schema above. The semicolon separator is illegal according to the 2014 W3C recommendation but Python 3 still supports it.Running the action described above (on an Android phone with no internet connectivity) will result in the following screens:ConclusionThis demonstration shows how you can send data from an offline phone to your server but since the flow of data is bidirectional, you can also send a payload from your server to your app.Due to the restrictions in message size and session length, you can only send lean data via USSD.  I used the query string schema because of the limited payload size but any schema/encoding can be used as long as the payload size is not exceeded. You can send multiple messages in sequence as long as the session is still valid. This means that you can implement a chunking algorithm to send data in sequence.Originally posted on the Hover blog.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2020/05/26/hover-offline-fallback/'> <img src='/images/23.jpg' alt='Hover As An Offline Fallback'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>8 min read <time class='article__date' datetime='2020-05-26T10:28:22+03:00'>May 26, 2020</time> </span> </div><h2 class='article__title'>Hover As An Offline Fallback</h2> <p class='article__excerpt'>This post explores how Hover + USSD can be used as a data fallback when internet connectivity is unavailable.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Ishuah Kariuki'><img class='article__author-image' src='/images/15.jpg' alt='Ishuah Kariuki's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Ishuah Kariuki</a><span> in </span> <span class='article-tags'> <a href='/tag/ussd' class='article__tag'>ussd</a>  <a href='/tag/offline-fallback' class='article__tag'>offline-fallback</a>  <a href='/tag/android-sdk' class='article__tag'>android-sdk</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "Preact-Rails Gem&amp;#58; Preact integration for Ruby on Rails.",
      "category" : "",
      "tags"     : "developer-tools",
      "url"      : "/2019/09/24/preact-rails-gem-preact-integration-for-ruby-on-rails/",
      "date"     : "Sep 24, 2019",
      "content"  : "Our vision at Hover is to empower developers with resources, services, and tools to build for local communities at global scale. As part of this vision, we’re happy to announce a new open source gem, preact-rails!A few weeks ago we wrote about how our developers outgrew our dashboard within two months of our official launch. We took this as an opportunity to improve our dashboard UI and UX.The first step was picking a javascript UI library. We had a lot of options but the ones that stood out were Vue.js and React. Part of the engineering team was familiar with React and it proved robust enough so we went ahead and picked that. You’re probably wondering why I’m mentioning React when the title clearly states “Preact”. Keep reading, it gets better.Our dashboard is built on Ruby on Rails which is, by all accounts, very opinionated. Decoupling the front-end to an independent project would cause a lot of integration pains, the biggest being managing user sessions without compromising security. We wanted to upgrade the front-end without committing major changes to the back-end engine. The driving factor here was time, we didn’t have enough of it (do we ever?).Taking this into consideration, we went back to our javascript UI library choice, React. We chose react before we made the choice not to build a whole front-end project on it’s own. The most feasible option was to serve react components on top of Rails views. It’s minimal and it serves our purpose of not intruding on the back-end and there was a gem just for this, react-rails.We started testing the gem by building a few simple components: buttons and forms. Around this time David Kutalek came across Preact (mentioned to him by our head of design, Justin Scherer). We were intrigued. In a nutshell, Preact is a fast 3kB alternative to React. There are subtle differences that are addressed by a compatibility layer preact-compat. We wanted to test it out before we jumped in head first. There was one issue: we couldn’t find a gem similar to react-rails, a Preact implementation for Ruby on Rails. That’s when preact-rails was conceptualized. Inspired (and heavily influenced) by react-rails, we started building a Preact implementation for Ruby on Rails.This is where we get a tiny bit technical. There are two parts of this project. The first part is the ruby gem, aptly named preact-rails. The gem serves one purpose, to make preact_component available as a view helper. This view helper takes in three variables, a component name, component props and component options and returns a div DOM node with the properties data-preact-class and data-preact-props. That’s a lot of confusing words, let me demonstrate.In your view, you call preact_component like so:  &lt;%= preact_component(“SimpleButton”, { label: “Start” }) %&gt;Where “SimpleButton” is the Preact component name, label is a prop and “Start” is a prop value. And this is what gets rendered when you load the view on a browser:  &lt;div data-preact-class=“SimpleButton” data-preact-props=“{'label':'Start'}”&gt;  &lt;/div&gt;That’s the first part. The second part of the project is an npm package, preact_ujs. (UJS stands for Unobtrusive JavaScript). This package takes the div rendered above and inflates the named Preact component. This is the complex part but I’ll try make it comprehendible.Let’s start with the SimpleButtonComponent, defined as such:  import { h, Component } from “preact”    class SimpleButton extends Component {    render (props, state) {      return (&lt;button&gt;{props.label}&lt;/button&gt;)    }  }The component returns a button DOM element with the property label as the child node. Now, back to preact_ujs. This package has a function mountComponent where all the action happens. It starts by finding all DOM components with the attribute data-preact-class, loops through each of them finding the component class definition and parsing the props. Finally, it renders the component, that’s it!That’s the inner workings of the gem, you can take a closer look on the github repo. We have complete setup instructions on the README.We used this gem to test Preact and we loved it. We really didn’t need all the rich features offered by React so the initial proposition attracted us. Three sprints later we launched our new dashboard. So far user feedback has been positive, our developers love it!We’re still building on our dashboard, powered by our handy little gem. As we build we’ll be making improvements on the gem, starting with tests and TypeScript support. Pull requests are welcome!Originally posted on the Hover blog.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2019/09/24/preact-rails-gem-preact-integration-for-ruby-on-rails/'> <img src='/images/22.jpg' alt='Preact-Rails Gem&amp;#58; Preact integration for Ruby on Rails.'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2019-09-24T03:00:00+03:00'>Sep 24, 2019</time> </span> </div><h2 class='article__title'>Preact-Rails Gem&amp;#58; Preact integration for Ruby on Rails.</h2> <p class='article__excerpt'>We&#39;re happy to announce a new open source gem, preact-rails!</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Ishuah Kariuki'><img class='article__author-image' src='/images/15.jpg' alt='Ishuah Kariuki's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Ishuah Kariuki</a><span> in </span> <span class='article-tags'> <a href='/tag/developer-tools' class='article__tag'>developer-tools</a> </span></div></div></div></div></div>"
    } ,
  
    {
      "title"    : "Design Patterns&amp;#58; A Retrospective",
      "category" : "",
      "tags"     : "software-development, culture, and design-patterns",
      "url"      : "/2019/03/25/design-patterns-a-retrospective/",
      "date"     : "Mar 25, 2019",
      "content"  : "Design patterns are like the instruction manuals that come with your dining table, you’ll never need them unless you want to enjoy your meals on a flat surface. Based on that statement, you can tell that I’m not entirely impartial when it comes to software design patterns. I’ve been on both ends of the spectrum, from indifference to the type of fondness you only have for comfort food.If you’re like me you probably implemented design patterns without really understanding them. I only fully appreciated the concept after (an admitted struggle) reading the GoF Design Patterns book. Legend has it that, after writing copious amounts of code, the “Gang of Four” realized that they were solving recurring problems. For the good of the lazy, they published Design Patterns: Elements of Reusable Object-Oriented Software (aka GoF Design Patterns), a book that catalogs 23 solutions to common programming problems.The Design Patterns concept was adapted from Christopher Alexanders’ A Pattern Language. In the book, Alexander et al. describe reusable solutions to architectural problems. Architectural as in buildings and doors and all that stuff. The Gang of Four applied the same concept to software engineering, specifically object-oriented software design. They used practical solutions implemented in C++ and Smalltalk, both popular languages at the time (the early 1990s). Initially the term “Design Patterns” almost exclusively referred to the patterns described in this book. Over the years more patterns have been developed but the core definition remains the same: A design pattern is a repeatable solution to a commonly occurring problem.Design patterns are not simple, they were never meant to be because the problems they solve are not simple. As with all non-simple things, there’s a danger of misinterpretation which leads to misuse, abuse, and bad code reviews. I went through a ‘design pattern frenzy’ where I tried to implement patterns in everything until everything was an untidy ball of regrets. There are no shortcuts with design patterns. They come with complexity and consequences which have to be taken into consideration.Some design patterns encourage bad practice. I’m looking at you, Singleton. Quoting Kent Beck in his book Test-Driven Development By Example, he says, “How do you provide global variables in languages without global variables? Don’t. Your programs will thank you for taking the time to think about design instead.” Singletons are considered harmful because they create globals and globals are bad. There are cases where Singletons are useful, for instance, application logs. It’s much easier to have one instance of your log class which you can use throughout your application without worrying about initialization. It’s considered acceptable because logging shouldn’t affect the execution of your application.There are harsher criticisms that question the existence of design patterns. In 1996, Peter Norvig made a presentation titled Design Patterns in Dynamic Languages where he demonstrated that most design patterns become simpler or even unnecessary in Lisp. Paul Graham, in his blog post Revenge of the Nerds, says: “I wonder if these patterns are not sometimes evidence of case ( c ), the human compiler, at work. When I see patterns in my programs, I consider it a sign of trouble.” These two arguments lead to a broader question, are design patterns missing language features?Despite the criticism, Design Patterns have made an impact. User interface designers have a cataloged list of 100+ design patterns, documented very similarly to the GoF design patterns. React developers have a free ebook that addresses react in patterns. There are countless collections of design pattern implementations in multiple languages (Python, Golang, Java).Back when I started learning Golang, I wanted to see how tests were written in production. That’s how I began contributing to ncw/rclone. The first contribution I ever made loosely revolved around the Abstract Factory Pattern.Rclone is a command line utility that syncs files and directories to and from different cloud storage providers. In this PR I implemented a way of emptying the trash on Google Drive. For some context on the code above, Fs is an interface that represents a file system and must be implemented by each cloud storage object. To implement an interface in Go, a struct has to implement all the interface methods. Cloud storage providers don’t have similar functionality so @ncw wrote a Features() method that returns all the optional features in a file system. CleanUp is one of those features. I didn’t have to write the empty trash method in the Google Drive struct, it’s already available in the official drive package. All I had to do was implement the CleanUp feature in the Google Drive struct, calling the empty trash method from within. The PR had 28 lines added, most of which was documentation. It took me less than 2 hours to put the whole thing together.That’s the power behind Design Patterns. They have a steep learning curve but the benefits are worth it, especially with large engineering teams working on expansive codebases. Better coordinated engineers means less technical debt, more productivity and better cycles.Design Patterns are a subjective choice in an objective discipline. If all else fails, KISS.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 grid__post animate'> <div class='article__inner'><a class='article__image' href='/2019/03/25/design-patterns-a-retrospective/'> <img src='/images/21.jpg' alt='Design Patterns&amp;#58; A Retrospective'> </a><div class='article__content'> <div class='article__meta'> <span class='article__minutes'>4 min read <time class='article__date' datetime='2019-03-25T11:00:24+03:00'>Mar 25, 2019</time> </span> </div><h2 class='article__title'>Design Patterns&amp;#58; A Retrospective</h2> <p class='article__excerpt'>Design Patterns are a subjective choice in an objective discipline. If all else fails, KISS.</p><div class='article__bottom'><div class='article__author'> <a href='/about/' aria-label='Ishuah Kariuki'><img class='article__author-image' src='/images/15.jpg' alt='Ishuah Kariuki's Picture'></a> </div><div class='article__bottom-meta'><a href='/about/' class='article__author-link'>Ishuah Kariuki</a><span> in </span> <span class='article-tags'> <a href='/tag/software-development' class='article__tag'>software-development</a>  <a href='/tag/culture' class='article__tag'>culture</a>  <a href='/tag/design-patterns' class='article__tag'>design-patterns</a> </span></div></div></div></div></div>"
    } 
  
]
